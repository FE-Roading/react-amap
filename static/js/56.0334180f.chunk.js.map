{"version":3,"sources":["../../packages/map/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/56.0334180f.chunk.js","sourcesContent":["export default \"Map 组件\\n===\\n\\nMap 组件是其他组件的基础，Map 组件会给所有的子组件注入三个属性 **`map`**，**`container`** 和 **`AMap`**，\\n\\n⚠️ 注意\\n\\n> 1. 组件 `<Map>` 必须包裹在 `<APILoader>` 组件内，该组件作用是加载高德地图 SDK。  \\n> 2. 其他地图组件必须作为 `<Map>` 的子组件使用；\\n\\n```jsx\\nimport { Map, APILoader } from '@uiw/react-amap';\\n// 或者单独安装使用\\nimport { Map } from '@uiw/react-amap-map';\\n```\\n\\n### 基本用法\\n\\nMap 的父组件必须具有宽度和高度；\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport { Map, APILoader } from '@uiw/react-amap';\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n      <Map />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 参数设置\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { Fragment, useState } from 'react';\\nimport { Map, APILoader } from '@uiw/react-amap';\\n\\nfunction Demo() {\\n  const [dragEnable, setDragEnable] = useState(true);\\n  const [display, setDisplay] = useState(true);\\n  const [zoom, setZoom] = useState(15);\\n  const [viewMode, setViewMode] = useState('3D');\\n  return (\\n    <Fragment>\\n      <button onClick={() => setDragEnable(!dragEnable)}>{dragEnable ? '禁用' : '启用'}拖拽</button>\\n      <button onClick={() => setDisplay(!display)}>{display ? '卸载' : '加载'}地图</button>\\n      <button onClick={() => setViewMode(viewMode === '3D' ? '2D' : '3D')}>{viewMode}地图</button>\\n      <button onClick={() => setZoom(zoom + 1)}>放大 +1 -> ({zoom})</button>\\n      <button onClick={() => setZoom(zoom - 1)}>缩小 -1 -> ({zoom})</button>\\n      <div style={{ width: '100%', height: 350 }}>\\n        {display && (\\n          <Map\\n            dragEnable={dragEnable}\\n            zoom={zoom}\\n            viewMode={viewMode}\\n            pitch={viewMode === '2D' ? 0 : 70}\\n          />\\n        )}\\n      </div>\\n    </Fragment>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Demo />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### Ref\\n\\n获取地图实例对象。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useEffect, useRef, Fragment } from 'react';\\nimport { Map, APILoader } from '@uiw/react-amap';\\n\\nfunction Demo() {\\n  const mapRef = useRef();\\n  useEffect(() => {\\n    console.log('mapRef:', mapRef)\\n  }, []);\\n  return (\\n    <div style={{ width: '100%', height: 330 }}>\\n      <Map\\n        layers={[new AMap.TileLayer.Satellite()]}\\n        ref={(instance) => {\\n          if (instance && instance.map) {\\n            const bounds = instance.map.getBounds();\\n            console.log('instance', instance);\\n          }\\n        }}\\n      />\\n      <Map\\n        layers={[new AMap.TileLayer.Satellite()]}\\n        ref={mapRef}\\n      />\\n    </div>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Demo />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### 事件触发\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React from 'react';\\nimport { Map, APILoader } from '@uiw/react-amap';\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n      <Map\\n        onComplete={(data, de) => {\\n          console.log('地图加载完成！', data, de);\\n        }}\\n        onClick={() => {\\n          console.log('点击事件！');\\n        }}\\n      />\\n    </APILoader>\\n  </div>\\n);\\nReactDOM.render(<Demo />, _mount_);\\n```\\n\\n### 特殊使用方法\\n\\n通过 `Map` 的子组件函数，返回三个对象 **`map`**，**`container`** 和 **`AMap`**，\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useEffect, useRef, Fragment } from 'react';\\nimport { Map, APILoader, ScaleControl, ToolBarControl, ControlBarControl, Geolocation } from '@uiw/react-amap';\\n\\nconst Demo = () => (\\n  <div style={{ width: '100%', height: '300px' }}>\\n    <Map center={[116.397428, 39.90923]} zoom={12}>\\n      {({ AMap, map, container }) => {\\n        console.log('map', map)\\n        if (map) {\\n          const marker = new AMap.Marker({\\n            icon: new AMap.Icon({\\n              imageSize: new AMap.Size(25, 34),\\n              image: '//a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-default.png'\\n            }),\\n            position: [116.405285,39.904989],\\n            offset: new AMap.Pixel(-13, -30)\\n          });\\n          marker.setMap(map);\\n        }\\n        return;\\n      }}\\n    </Map>\\n  </div>\\n);\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Demo />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### 将子组件封装到一个组件中\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useState, useRef } from 'react';\\nimport { Map, APILoader, Polyline, ToolBarControl } from '@uiw/react-amap';\\n\\nconst path1 = [ [121.099109,31.222311], [118.528308,31.989555], [117.319812,31.803006], [114.353503,30.67583], [115.891589,28.979429], [112.947253,28.188361], ];\\nconst path2 = [ [116.405289, 39.904987], [113.964458, 40.54664], [111.47836, 41.135964], [108.949297, 41.670904], [106.380111, 42.149509], [103.774185, 42.56996], [101.135432, 42.930601], [98.46826, 43.229964], [95.777529, 43.466798], [93.068486, 43.64009], [90.34669, 43.749086], [87.61792, 43.793308], ];\\n\\nconst ChildComp = (props = {}) => {\\n  return (\\n    <div>\\n      <Polyline {...props} visiable={true} strokeOpacity={1} path={path1} />\\n      <Polyline {...props} visiable={true} strokeOpacity={1} path={path2} />\\n    </div>\\n  )\\n}\\n\\nconst Example = () => {\\n  const [show, setShow] = useState(true);\\n  return (\\n    <div style={{ width: '100%', height: '300px' }}>\\n      <Map zoom={3}>\\n        {(props) => {\\n          return <ChildComp {...props} />;\\n        }}\\n      </Map>\\n    </div>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Example />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### Props\\n\\n[更多参数设置](https://github.com/uiwjs/react-amap/blob/268303d/src/types/core.d.ts#L461-L537)\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| center | 初始中心经纬度 | `[number, number] | LngLat` | - |\\n\\n### 事件\\n\\n[事件类型文档](https://github.com/uiwjs/react-amap/blob/268303d/src/types/core.d.ts#L298-L403)\\n\\n| 参数 | 说明 | 类型 |\\n| ---- | ---- | ---- |\\n| onComplete | 地图资源加载完成后触发事件 | - |\\n| onMouseMove | 鼠标在地图上移动时触发 | - |\\n| onZoomChange | 地图缩放级别更改后触发 | - |\\n| onMapMove | 地图平移时触发事件 | - |\\n| onMouseWheel | 鼠标滚轮开始缩放地图时触发 | - |\\n| onZoomStart | 缩放开始时触发 | - |\\n| onMouseOver | 鼠标移入地图容器内时触发 | - |\\n| onMouseOut | 鼠标移出地图容器时触发 | - |\\n| onDblClick | 鼠标左键双击事件 | - |\\n| onClick | 鼠标左键单击事件 | - |\\n| onZoomEnd | 缩放结束时触发 | - |\\n| onMoveEnd | 地图移动结束后触发，包括平移，以及中心点变化的缩放。如地图有拖拽缓动效果，则在缓动结束后触发 | - |\\n| onMouseUp | 鼠标在地图上单击抬起时触发 | - |\\n| onMouseDown | 鼠标在地图上单击按下时触发 | - |\\n| onRightClick | 鼠标右键单击事件 | - |\\n| onMoveStart | 地图平移开始时触发 | - |\\n| onDragStart | 开始拖拽地图时触发 | - |\\n| onDragging | 拖拽地图过程中触发 | - |\\n| onDragEnd | 停止拖拽地图时触发。如地图有拖拽缓动效果，则在拽停止，缓动开始前触发 | - |\\n| onHotspotOut | 鼠标移出热点时触发 | - |\\n| onHotspotOver | 鼠标滑过热点时触发 | - |\\n| onTouchStart | 触摸开始时触发事件，仅适用移动设备 | - |\\n| onHotspotClick | 鼠标点击热点时触发 | - |\\n| onTouchMove | 拖拽地图过程中触发，仅适用移动设备 | - |\\n| onTouchEnd | 触摸结束时触发事件，仅适用移动设备 | - |\\n| onResize | 地图容器尺寸改变事件 | - |\";"],"sourceRoot":""}