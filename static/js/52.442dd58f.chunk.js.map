{"version":3,"sources":["../../packages/geolocation/README.md"],"names":[],"mappings":"qGAAA,OAAe","file":"static/js/52.442dd58f.chunk.js","sourcesContent":["export default \"Geolocation 定位\\n===\\n\\n鹰眼控件，用于显示缩略地图，显示于地图右下角，可以随主图的视口变化而变化，也可以配置成固定位置实现类似于南海附图的效果。\\n\\n```jsx\\nimport { Geolocation } from '@uiw/react-amap';\\n// 或者单独安装使用\\nimport { Geolocation } from '@uiw/react-amap-geolocation';\\n```\\n\\n### 地图定位控件\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React, { useState, useRef } from 'react';\\nimport { APILoader, Map, Geolocation } from '@uiw/react-amap';\\n\\nconst Example = () => {\\n  const [data, setData] = useState();\\n  return (\\n    <>\\n      <div style={{ width: '100%', height: '300px' }}>\\n        <Map zoom={4}>\\n          <Geolocation\\n            // 是否使用高精度定位，默认:true\\n            enableHighAccuracy={true}\\n            // 超过10秒后停止定位，默认：5s\\n            timeout={10000}\\n            // 定位按钮的停靠位置\\n            // 官方 v2 不再支持\\n            // buttonPosition=\\\"RB\\\"\\n\\n            // 定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\\n            // 官方 v2 不再支持\\n            // buttonOffset={new AMap.Pixel(10, 20)}\\n            \\n            // 定位成功后是否自动调整地图视野到定位点\\n            zoomToAccuracy={true}\\n            onComplete={(data) => {\\n              console.log('返回数据：', setData, data);\\n              setData(data);\\n            }}\\n            onError={(data) => {\\n              console.log('错误返回数据：', data);\\n              setData(data);\\n            }}\\n          />\\n        </Map>\\n      </div>\\n      <pre style={{ padding: 10, marginTop: 10 }}>\\n        {data ? JSON.stringify(data, null, 2) : '{正在获取}'}\\n      </pre>\\n    </>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Example />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### 只获取定位经纬度\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React, { useState, useRef } from 'react';\\nimport { APILoader, Geolocation } from '@uiw/react-amap';\\n\\nconst Example = () => {\\n  const [data, setData] = useState();\\n  return (\\n    <>\\n      <div style={{ width: '100%' }}>\\n        <Geolocation\\n          // 是否使用高精度定位，默认:true\\n          enableHighAccuracy={true}\\n          // 超过10秒后停止定位，默认：5s\\n          timeout={10000}\\n          // 定位按钮的停靠位置\\n          buttonPosition=\\\"RB\\\"\\n          // 定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\\n          buttonOffset={new AMap.Pixel(10, 20)}\\n          // 定位成功后是否自动调整地图视野到定位点\\n          zoomToAccuracy={true}\\n          onComplete={(data) => {\\n            console.log('返回数据：', data);\\n            setData(data);\\n          }}\\n          onError={(data) => {\\n            console.log('错误返回数据：', data);\\n            setData(data);\\n          }}\\n        />\\n        <pre style={{ padding: 10, marginTop: 10 }}>\\n          {data ? JSON.stringify(data, null, 2) : '{正在获取}'}\\n        </pre>\\n      </div>\\n    </>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Example />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### 只获取定位地址信息\\n\\n<!--rehype:bgWhite=true&noScroll=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport React, { useState, useRef } from 'react';\\nimport { APILoader, Geolocation } from '@uiw/react-amap';\\n\\nconst Example = () => {\\n  const [data, setData] = useState();\\n  return (\\n    <>\\n      <div style={{ width: '100%' }}>\\n        <Geolocation\\n          type=\\\"cityInfo\\\"\\n          // 是否使用高精度定位，默认:true\\n          enableHighAccuracy={true}\\n          // 超过10秒后停止定位，默认：5s\\n          timeout={10000}\\n          // 定位按钮的停靠位置\\n          buttonPosition=\\\"RT\\\"\\n          // 定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\\n          buttonOffset={new AMap.Pixel(10, 20)}\\n          // 定位成功后是否自动调整地图视野到定位点\\n          zoomToAccuracy={true}\\n          onComplete={(data) => {\\n            console.log('返回数据：', data);\\n            setData(data);\\n          }}\\n          onError={(data) => {\\n            console.log('错误返回数据：', data);\\n            setData(data);\\n          }}\\n        />\\n        <pre style={{ padding: 10, marginTop: 10 }}>\\n          {data ? JSON.stringify(data, null, 2) : '{正在获取}'}\\n        </pre>\\n      </div>\\n    </>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Example />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### 不使用组件\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n```jsx\\nimport ReactDOM from 'react-dom';\\nimport React, { useEffect, useState, useRef } from 'react';\\nimport { APILoader, Geolocation } from '@uiw/react-amap';\\n\\nconst Example = () => {\\n  const [data, setData] = useState();\\n  useEffect(() => {\\n    AMap.plugin(['AMap.Geolocation'], () => {\\n      const instance = new AMap.Geolocation({});\\n      instance.getCityInfo((status, result) => {\\n        console.log('>>>>', status, result)\\n        if(status === 'complete'){\\n          setData(result);\\n        } else if (onError) {\\n          setData(result);\\n        }\\n      });\\n    });\\n  }, []);\\n  return (\\n    <>\\n      <div style={{ width: '100%' }}>\\n        <pre style={{ padding: 10, marginTop: 10 }}>\\n          {data ? JSON.stringify(data, null, 2) : '{正在获取}'}\\n        </pre>\\n      </div>\\n    </>\\n  );\\n}\\n\\nReactDOM.render((\\n  <APILoader akay=\\\"a7a90e05a37d3f6bf76d4a9032fc9129\\\">\\n    <Example />\\n  </APILoader>\\n), _mount_);\\n```\\n\\n### Props\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n|--------- |-------- |--------- |-------- |\\n| type | 获取 position: \\\"获取 用户的精确位置，有失败几率\\\" 或 cityInfo: \\\"根据用户 IP 获取 用户所在城市信息\\\" | `position|cityInfo` | `position` |\\n\\n### 事件\\n\\n| 参数 | 说明 | 类型 |\\n| ---- | ---- | ---- |\\n| onComplete | 数据请求完成时触发事件。 | `(data: GeolocationLiveResult | GeolocationForecastResult): void;` |\\n| onError | 数据请求错误时触发事件。 | `(err): void;` |\";"],"sourceRoot":""}