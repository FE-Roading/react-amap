{"version":3,"sources":["../../node_modules/babel-plugin-transform-remove-imports/lib/index.js"],"names":["testMatches","importName","test","Array","isArray","some","regex","RegExp","Object","defineProperty","exports","value","name","visitor","CallExpression","path","state","node","callee","moduleId","arguments","options","opts","parentType","parentPath","type","remove","ImportDeclaration","source","removeAll","undefined","isMatch","specifiers","length","console","warn"],"mappings":"oGAiFA,SAASA,EAAYC,EAAYC,GAI/B,OAFYC,MAAMC,QAAQF,GAAQA,EAAO,CAACA,IAE7BG,MAAK,SAAUC,GAK1B,MAJqB,kBAAVA,IACTA,EAAQ,IAAIC,OAAOD,IAGdA,EAAMJ,KAAKD,GAAc,OAxFpCO,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAO,QAEP,WACE,MAAO,CACLE,KAAM,2BACNC,QAAS,CAEPC,eAAgB,SAAwBC,EAAMC,GAC5C,IAAIC,EAAOF,EAAKE,KAEhB,GAAyB,YAArBA,EAAKC,OAAON,KAAhB,CAIA,IACIO,EADWF,EAAKG,UAAU,GACNT,MACpBU,EAAUL,EAAMM,KAEpB,IAAID,EAAQnB,MAASF,EAAYmB,EAAUE,EAAQnB,MAAnD,CAIA,IAAIqB,EAAaR,EAAKS,WAAWP,KAAKQ,KAGf,YAAnBJ,EAAQK,QAAuC,wBAAfH,GAIpCR,EAAKW,YAGPC,kBAAmB,SAA2BZ,EAAMC,GAClD,IAAIC,EAAOF,EAAKE,KACZW,EAASX,EAAKW,OACdN,EAAON,EAAMM,KAEjB,GAAIA,EAAKO,UACPd,EAAKW,cAIP,GAAKJ,EAAKpB,KAAV,CAOA,IAAID,EAAa2B,GAAUA,EAAOjB,MAAQiB,EAAOjB,WAAQmB,EACrDC,EAAU/B,EAAYC,EAAYqB,EAAKpB,MAEvB,YAAhBoB,EAAKI,OAQLzB,GAAc8B,GAChBhB,EAAKW,SARDT,EAAKe,YAAyC,IAA3Bf,EAAKe,WAAWC,QAAgBhC,GAAc8B,GACnEhB,EAAKW,cAXPQ,QAAQC,KAAK","file":"static/js/babel_plugin.6ffede8e.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nfunction _default() {\n  return {\n    name: 'transform-remove-imports',\n    visitor: {\n      // https://babeljs.io/docs/en/babel-types#callexpression\n      CallExpression: function CallExpression(path, state) {\n        var node = path.node;\n\n        if (node.callee.name !== 'require') {\n          return;\n        }\n\n        var argument = node.arguments[0];\n        var moduleId = argument.value;\n        var options = state.opts;\n\n        if (options.test && !testMatches(moduleId, options.test)) {\n          return;\n        }\n\n        var parentType = path.parentPath.node.type; // In remove effects mode we should delete only requires that are\n        // simple expression statements\n\n        if (options.remove === 'effects' && parentType !== 'ExpressionStatement') {\n          return;\n        }\n\n        path.remove();\n      },\n      // https://babeljs.io/docs/en/babel-types#importdeclaration\n      ImportDeclaration: function ImportDeclaration(path, state) {\n        var node = path.node;\n        var source = node.source;\n        var opts = state.opts;\n\n        if (opts.removeAll) {\n          path.remove();\n          return;\n        }\n\n        if (!opts.test) {\n          console.warn('transform-remove-imports: \"test\" option should be specified');\n          return;\n        }\n        /** @var {string} importName */\n\n\n        var importName = source && source.value ? source.value : undefined;\n        var isMatch = testMatches(importName, opts.test); // https://github.com/uiwjs/babel-plugin-transform-remove-imports/issues/3\n\n        if (opts.remove === 'effects') {\n          if (node.specifiers && node.specifiers.length === 0 && importName && isMatch) {\n            path.remove();\n          }\n\n          return;\n        }\n\n        if (importName && isMatch) {\n          path.remove();\n        }\n      }\n    }\n  };\n}\n/**\n * Determines if the import matches the specified tests.\n *\n * @param {string} importName\n * @param {RegExp|RegExp[]|string|string[]} test\n * @returns {Boolean}\n */\n\n\nfunction testMatches(importName, test) {\n  // Normalizing tests\n  var tests = Array.isArray(test) ? test : [test]; // Finding out if at least one test matches\n\n  return tests.some(function (regex) {\n    if (typeof regex === 'string') {\n      regex = new RegExp(regex);\n    }\n\n    return regex.test(importName || '');\n  });\n}"],"sourceRoot":""}